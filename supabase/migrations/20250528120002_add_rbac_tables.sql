-- Migration to add RBAC (Role-Based Access Control) to the database

-- Create roles table
CREATE TABLE IF NOT EXISTS "public"."roles" (
    "id" bigint NOT NULL,
    "name" text NOT NULL,
    "description" text,
    "created_at" timestamp with time zone DEFAULT now() NOT NULL
);

ALTER TABLE "public"."roles" OWNER TO "postgres";
ALTER TABLE "public"."roles" ALTER COLUMN "id" ADD GENERATED BY DEFAULT AS IDENTITY (
    SEQUENCE NAME "public"."roles_id_seq"
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1
);

ALTER TABLE ONLY "public"."roles" ADD CONSTRAINT "roles_pkey" PRIMARY KEY ("id");
ALTER TABLE ONLY "public"."roles" ADD CONSTRAINT "roles_name_key" UNIQUE ("name");

-- Create permissions table
CREATE TABLE IF NOT EXISTS "public"."permissions" (
    "id" bigint NOT NULL,
    "name" text NOT NULL,
    "description" text,
    "resource" text NOT NULL,
    "action" text NOT NULL,
    "created_at" timestamp with time zone DEFAULT now() NOT NULL
);

ALTER TABLE "public"."permissions" OWNER TO "postgres";
ALTER TABLE "public"."permissions" ALTER COLUMN "id" ADD GENERATED BY DEFAULT AS IDENTITY (
    SEQUENCE NAME "public"."permissions_id_seq"
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1
);

ALTER TABLE ONLY "public"."permissions" ADD CONSTRAINT "permissions_pkey" PRIMARY KEY ("id");
ALTER TABLE ONLY "public"."permissions" ADD CONSTRAINT "permissions_name_key" UNIQUE ("name");
ALTER TABLE ONLY "public"."permissions" ADD CONSTRAINT "permissions_resource_action_key" UNIQUE ("resource", "action");

-- Create role_permissions junction table
CREATE TABLE IF NOT EXISTS "public"."role_permissions" (
    "role_id" bigint NOT NULL,
    "permission_id" bigint NOT NULL
);

ALTER TABLE "public"."role_permissions" OWNER TO "postgres";
ALTER TABLE ONLY "public"."role_permissions" ADD CONSTRAINT "role_permissions_pkey" PRIMARY KEY ("role_id", "permission_id");
ALTER TABLE ONLY "public"."role_permissions" ADD CONSTRAINT "role_permissions_role_id_fkey" FOREIGN KEY ("role_id") REFERENCES "public"."roles"("id") ON DELETE CASCADE;
ALTER TABLE ONLY "public"."role_permissions" ADD CONSTRAINT "role_permissions_permission_id_fkey" FOREIGN KEY ("permission_id") REFERENCES "public"."permissions"("id") ON DELETE CASCADE;

-- Create user_roles junction table
CREATE TABLE IF NOT EXISTS "public"."user_roles" (
    "user_id" uuid NOT NULL,
    "role_id" bigint NOT NULL,
    "created_at" timestamp with time zone DEFAULT now() NOT NULL
);

ALTER TABLE "public"."user_roles" OWNER TO "postgres";
ALTER TABLE ONLY "public"."user_roles" ADD CONSTRAINT "user_roles_pkey" PRIMARY KEY ("user_id", "role_id");
ALTER TABLE ONLY "public"."user_roles" ADD CONSTRAINT "user_roles_role_id_fkey" FOREIGN KEY ("role_id") REFERENCES "public"."roles"("id") ON DELETE CASCADE;
ALTER TABLE ONLY "public"."user_roles" ADD CONSTRAINT "user_roles_user_id_fkey" FOREIGN KEY ("user_id") REFERENCES "auth"."users"("id") ON DELETE CASCADE;

-- Enable Row Level Security
ALTER TABLE "public"."roles" ENABLE ROW LEVEL SECURITY;
ALTER TABLE "public"."permissions" ENABLE ROW LEVEL SECURITY;
ALTER TABLE "public"."role_permissions" ENABLE ROW LEVEL SECURITY;
ALTER TABLE "public"."user_roles" ENABLE ROW LEVEL SECURITY;

-- Create RLS policies
CREATE POLICY "Enable read access for all users" ON "public"."roles" FOR SELECT USING (true);
CREATE POLICY "Enable insert for service role only" ON "public"."roles" FOR INSERT TO "service_role" WITH CHECK (true);
CREATE POLICY "Enable update for service role only" ON "public"."roles" FOR UPDATE TO "service_role" WITH CHECK (true);
CREATE POLICY "Enable delete for service role only" ON "public"."roles" FOR DELETE TO "service_role" USING (true);

CREATE POLICY "Enable read access for all users" ON "public"."permissions" FOR SELECT USING (true);
CREATE POLICY "Enable insert for service role only" ON "public"."permissions" FOR INSERT TO "service_role" WITH CHECK (true);
CREATE POLICY "Enable update for service role only" ON "public"."permissions" FOR UPDATE TO "service_role" WITH CHECK (true);
CREATE POLICY "Enable delete for service role only" ON "public"."permissions" FOR DELETE TO "service_role" USING (true);

CREATE POLICY "Enable read access for all users" ON "public"."role_permissions" FOR SELECT USING (true);
CREATE POLICY "Enable insert for service role only" ON "public"."role_permissions" FOR INSERT TO "service_role" WITH CHECK (true);
CREATE POLICY "Enable update for service role only" ON "public"."role_permissions" FOR UPDATE TO "service_role" WITH CHECK (true);
CREATE POLICY "Enable delete for service role only" ON "public"."role_permissions" FOR DELETE TO "service_role" USING (true);

CREATE POLICY "Enable read access for all users" ON "public"."user_roles" FOR SELECT USING (true);
CREATE POLICY "Enable insert for service role only" ON "public"."user_roles" FOR INSERT TO "service_role" WITH CHECK (true);
CREATE POLICY "Enable update for service role only" ON "public"."user_roles" FOR UPDATE TO "service_role" WITH CHECK (true);
CREATE POLICY "Enable delete for service role only" ON "public"."user_roles" FOR DELETE TO "service_role" USING (true);

-- Grant permissions
GRANT ALL ON TABLE "public"."roles" TO "anon";
GRANT ALL ON TABLE "public"."roles" TO "authenticated";
GRANT ALL ON TABLE "public"."roles" TO "service_role";

GRANT ALL ON SEQUENCE "public"."roles_id_seq" TO "anon";
GRANT ALL ON SEQUENCE "public"."roles_id_seq" TO "authenticated";
GRANT ALL ON SEQUENCE "public"."roles_id_seq" TO "service_role";

GRANT ALL ON TABLE "public"."permissions" TO "anon";
GRANT ALL ON TABLE "public"."permissions" TO "authenticated";
GRANT ALL ON TABLE "public"."permissions" TO "service_role";

GRANT ALL ON SEQUENCE "public"."permissions_id_seq" TO "anon";
GRANT ALL ON SEQUENCE "public"."permissions_id_seq" TO "authenticated";
GRANT ALL ON SEQUENCE "public"."permissions_id_seq" TO "service_role";

GRANT ALL ON TABLE "public"."role_permissions" TO "anon";
GRANT ALL ON TABLE "public"."role_permissions" TO "authenticated";
GRANT ALL ON TABLE "public"."role_permissions" TO "service_role";

GRANT ALL ON TABLE "public"."user_roles" TO "anon";
GRANT ALL ON TABLE "public"."user_roles" TO "authenticated";
GRANT ALL ON TABLE "public"."user_roles" TO "service_role";

-- Create function to check if a user has a specific permission
CREATE OR REPLACE FUNCTION public.user_has_permission(
    user_id uuid,
    resource text,
    action text
) RETURNS boolean AS $$
DECLARE
    has_permission boolean;
BEGIN
    SELECT EXISTS (
        SELECT 1
        FROM public.user_roles ur
        JOIN public.role_permissions rp ON ur.role_id = rp.role_id
        JOIN public.permissions p ON rp.permission_id = p.id
        WHERE ur.user_id = user_has_permission.user_id
        AND ((p.resource = user_has_permission.resource
        AND p.action = user_has_permission.action)
        OR (p.resource = '*' AND p.action = '*'))
    ) INTO has_permission;

    RETURN has_permission;
END;
$$ LANGUAGE plpgsql SECURITY DEFINER;

-- Grant execute permission to all users
GRANT EXECUTE ON FUNCTION public.user_has_permission TO anon;
GRANT EXECUTE ON FUNCTION public.user_has_permission TO authenticated;
GRANT EXECUTE ON FUNCTION public.user_has_permission TO service_role;

-- Create function to get all permissions for a user
CREATE OR REPLACE FUNCTION public.get_user_permissions(
    user_id uuid
) RETURNS TABLE (
    permission_name text,
    resource text,
    action text
) AS $$
BEGIN
    RETURN QUERY
    SELECT DISTINCT p.name, p.resource, p.action
    FROM public.user_roles ur
    JOIN public.role_permissions rp ON ur.role_id = rp.role_id
    JOIN public.permissions p ON rp.permission_id = p.id
    WHERE ur.user_id = get_user_permissions.user_id;
END;
$$ LANGUAGE plpgsql SECURITY DEFINER;

-- Grant execute permission to all users
GRANT EXECUTE ON FUNCTION public.get_user_permissions TO anon;
GRANT EXECUTE ON FUNCTION public.get_user_permissions TO authenticated;
GRANT EXECUTE ON FUNCTION public.get_user_permissions TO service_role;

-- Insert default roles and permissions
INSERT INTO public.roles (name, description) VALUES
('admin', 'Administrator with full access'),
('manager', 'Tournament manager with access to create and manage tournaments'),
('player', 'Regular player with limited access');

-- Insert default permissions
INSERT INTO public.permissions (name, resource, action, description) VALUES
-- Admin permissions
('manage_all', '*', '*', 'Manage everything'),

-- Tournament permissions
('view_tournaments', 'tournaments', 'read', 'View tournaments'),
('create_tournaments', 'tournaments', 'create', 'Create tournaments'),
('edit_tournaments', 'tournaments', 'update', 'Edit tournaments'),
('delete_tournaments', 'tournaments', 'delete', 'Delete tournaments'),

-- Session permissions
('view_sessions', 'sessions', 'read', 'View sessions'),
('create_sessions', 'sessions', 'create', 'Create sessions'),
('edit_sessions', 'sessions', 'update', 'Edit sessions'),
('delete_sessions', 'sessions', 'delete', 'Delete sessions'),
('submit_sessions', 'sessions', 'submit', 'Submit sessions'),

-- Player permissions
('view_players', 'players', 'read', 'View players'),
('create_players', 'players', 'create', 'Create players'),
('edit_players', 'players', 'update', 'Edit players'),
('delete_players', 'players', 'delete', 'Delete players'),

-- Rating class permissions
('view_rating_classes', 'rating_classes', 'read', 'View rating classes'),
('create_rating_classes', 'rating_classes', 'create', 'Create rating classes'),
('edit_rating_classes', 'rating_classes', 'update', 'Edit rating classes'),
('delete_rating_classes', 'rating_classes', 'delete', 'Delete rating classes'),

-- Scorecard permissions
('view_scorecards', 'scorecards', 'read', 'View scorecards'),
('create_scorecards', 'scorecards', 'create', 'Create scorecards'),
('edit_scorecards', 'scorecards', 'update', 'Edit scorecards'),
('delete_scorecards', 'scorecards', 'delete', 'Delete scorecards');

-- Assign permissions to roles
-- Admin role gets all permissions
INSERT INTO public.role_permissions (role_id, permission_id)
SELECT
    (SELECT id FROM public.roles WHERE name = 'admin'),
    id
FROM public.permissions;

-- Manager role gets tournament management permissions
INSERT INTO public.role_permissions (role_id, permission_id)
SELECT
    (SELECT id FROM public.roles WHERE name = 'manager'),
    id
FROM public.permissions
WHERE name IN (
    'view_tournaments', 'create_tournaments', 'edit_tournaments', 'delete_tournaments',
    'view_sessions', 'create_sessions', 'edit_sessions', 'delete_sessions', 'submit_sessions',
    'view_players', 'create_players', 'edit_players',
    'view_rating_classes', 'create_rating_classes', 'edit_rating_classes',
    'view_scorecards', 'create_scorecards', 'edit_scorecards'
);

-- Player role gets basic permissions
INSERT INTO public.role_permissions (role_id, permission_id)
SELECT
    (SELECT id FROM public.roles WHERE name = 'player'),
    id
FROM public.permissions
WHERE name IN (
    'view_tournaments',
    'view_sessions', 'create_sessions', 'edit_sessions', 'submit_sessions',
    'view_players', 'create_players',
    'view_rating_classes',
    'view_scorecards', 'create_scorecards', 'edit_scorecards'
);